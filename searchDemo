
from django.conf.urls import url
from django.contrib import admin
from .views import HomeView, ProductView, FacetedSearchView, autocomplete
from .settings import MEDIA_ROOT, MEDIA_URL
from django.conf.urls.static import static

urlpatterns = [
    url(r'^$', HomeView.as_view()),
    url(r'^admin/', admin.site.urls),
    url(r'^product/(?P<slug>[\w-]+)/$', ProductView.as_view(), name='product'),
    url(r'^search/autocomplete/$', autocomplete),
    url(r'^find/', FacetedSearchView.as_view(), name='haystack_search'),
    
] + static(MEDIA_URL, document_root=MEDIA_ROOT)


from django.views.generic import TemplateView
from django.views.generic.detail import DetailView
from django.http import JsonResponse
from haystack.generic_views import FacetedSearchView as BaseFacetedSearchView
from haystack.query import SearchQuerySet

from .models import Product
from .forms import FacetedProductSearchForm


class HomeView(TemplateView):
    template_name = "home.html"


class ProductView(DetailView):
    template_name = "product.html"
    model = Product


def autocomplete(request):
    sqs = SearchQuerySet().autocomplete(
        content_auto=request.GET.get(
            'query',
            ''))[
        :5]
    s = []
    for result in sqs:
        d = {"value": result.title, "data": result.object.slug}
        s.append(d)
    output = {'suggestions': s}
    return JsonResponse(output)


class FacetedSearchView(BaseFacetedSearchView):

    form_class = FacetedProductSearchForm
    facet_fields = ['category', 'brand', 'fuelType', 'gearBox', 'repairedDamage']
    template_name = 'search_result.html'
    paginate_by = 3
    context_object_name = 'object_list'


"""
WSGI config for searchDemo project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "searchDemo.settings")

application = get_wsgi_application()




from django.contrib import admin

from .models import Product, Category, FuelType, GearBox, Brand, RepairedDamage


admin.site.register(Category)

admin.site.register(FuelType)

admin.site.register(GearBox)

admin.site.register(Brand)

admin.site.register(RepairedDamage)

class ProductAdmin(admin.ModelAdmin):
    prepopulated_fields = {"slug": ("title",)}

admin.site.register(Product, ProductAdmin)



from haystack.forms import FacetedSearchForm


class FacetedProductSearchForm(FacetedSearchForm):

    def __init__(self, *args, **kwargs):
        data = dict(kwargs.get("data", []))
        self.categories = data.get('category', [])
        self.brands = data.get('brand', [])
        self.fuelTypes = data.get('fuelType', [])
        self.gearBoxs = data.get('gearBox', [])
	self.repairedDamages = data.get('repairedDamage', [])
        super(FacetedProductSearchForm, self).__init__(*args, **kwargs)

    def search(self):
        sqs = super(FacetedProductSearchForm, self).search()
        if self.categories:
            query = None
            for category in self.categories:
                if query:
                    query += u' OR '
                else:
                    query = u''
                query += u'"%s"' % sqs.query.clean(category)
            sqs = sqs.narrow(u'category_exact:%s' % query)
        if self.brands:
            query = None
            for brand in self.brands:
                if query:
                    query += u' OR '
                else:
                    query = u''
                query += u'"%s"' % sqs.query.clean(brand)
            sqs = sqs.narrow(u'brand_exact:%s' % query)

	if self.fuelTypes:
            query = None
            for fuelType in self.fuelTypes:
                if query:
                    query += u' OR '
                else:
                    query = u''
                query += u'"%s"' % sqs.query.clean(fuelType)
            sqs = sqs.narrow(u'fuelType_exact:%s' % query)

	if self.gearBoxs:
            query = None
            for gearBox in self.gearBoxs:
                if query:
                    query += u' OR '
                else:
                    query = u''
                query += u'"%s"' % sqs.query.clean(gearBox)
            sqs = sqs.narrow(u'gearBox_exact:%s' % query)

	if self.repairedDamages:
            query = None
            for repairedDamage in self.repairedDamages:
                if query:
                    query += u' OR '
                else:
                    query = u''
                query += u'"%s"' % sqs.query.clean(repairedDamage)
            sqs = sqs.narrow(u'repairedDamage_exact:%s' % query)

        return sqs


from django.db import models
from django.urls.base import reverse

class Category(models.Model):
    name = models.CharField(max_length=255, db_index=True, unique=True)

    def __str__(self):
        return self.name

class FuelType(models.Model):
    name = models.CharField(max_length=255, db_index=True, unique=True)

    def __str__(self):
        return self.name

class GearBox(models.Model):
    name = models.CharField(max_length=255, db_index=True, unique=True)

    def __str__(self):
        return self.name

class Brand(models.Model):
    name = models.CharField(max_length=255, db_index=True, unique=True)

    def __str__(self):
        return self.name

class RepairedDamage(models.Model):
    name = models.CharField(max_length=255, db_index=True, unique=True)

    def __str__(self):
        return self.name


class Product(models.Model):
    title = models.CharField(unique=True, max_length=255, db_index=True, default='')
    slug = models.SlugField(null=True, blank=True, unique=True, max_length=255)
    description = models.TextField(db_index=True)
    price = models.IntegerField(db_index=True, default=0)
    year = models.IntegerField(db_index=True, default=0)
    power = models.IntegerField(db_index=True, default=0)
    distance = models.IntegerField(db_index=True, default=0)
    carmodel = models.TextField(db_index=True)

    #brand = models.CharField(db_index=True, max_length=255)
    brand = models.ForeignKey(Brand, null=True, blank=True, related_name='brand')
    category = models.ForeignKey(Category, related_name='category')
    image = models.ImageField(upload_to = 'product_images/', default = 'product_images/no-img.jpg')
    timestamp = models.DateTimeField(auto_now=True)
    fuelType = models.ForeignKey(FuelType, null=True, blank=True, related_name='fuelType')
    gearBox = models.ForeignKey(GearBox, null=True, blank=True, related_name='gearBox')
    repairedDamage = models.ForeignKey(RepairedDamage, null=True, blank=True, related_name='repairedDamage')
    



    def get_absolute_url(self):
        return reverse('product',
                       kwargs={'slug': self.slug})


    def __str__(self):
        return self.title

    


import datetime
from django.utils import timezone
from haystack import indexes
from haystack.fields import CharField

from .models import Product


class ProductIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.EdgeNgramField(
        document=True, use_template=True,
        template_name='/home/ubuntu/Documents/django-haystack-elasticsearch-master/templates/search/indexes/product_text.txt')
    title = indexes.EdgeNgramField(model_attr='title')
    description = indexes.EdgeNgramField(model_attr="description", null=True)
    price = indexes.EdgeNgramField(model_attr="price", null=True)
    year = indexes.EdgeNgramField(model_attr="year", null=True)
    carmodel = indexes.EdgeNgramField(model_attr="carmodel", null=True)
    distance = indexes.EdgeNgramField(model_attr="distance", null=True)
    power = indexes.EdgeNgramField(model_attr="power", null=True)

    category = indexes.CharField(model_attr='category', faceted=True)

    fuelType = indexes.CharField(model_attr='fuelType', null=True, faceted=True)

    brand = indexes.CharField(model_attr='brand', faceted=True)

    gearBox = indexes.CharField(model_attr='gearBox', null=True, faceted=True)

    repairedDamage = indexes.CharField(model_attr='repairedDamage', null=True, faceted=True)

    # for auto complete
    content_auto = indexes.EdgeNgramField(model_attr='title')

    # Spelling suggestions
    suggestions = indexes.FacetCharField()

    def get_model(self):
        return Product

    def index_queryset(self, using=None):
        """Used when the entire index for model is updated."""
        return self.get_model().objects.filter(timestamp__lte=timezone.now())


import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^e$@2k08pt0z6hgpvgao&+lh!mm9t4u+0#=v8&9we!$e4q_0$('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['83.212.103.223','127.0.0.1','localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',
    'searchDemo'
]


HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://127.0.0.1:9200/',
        'INDEX_NAME': 'products_tutorial',
    },
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'searchDemo.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'searchDemo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
STATIC_ROOT = ''
STATIC_URL = '/static/'
STATICFILES_DIRS = ( os.path.join(BASE_DIR, 'static'), )
MEDIA_ROOT = BASE_DIR
MEDIA_URL = '/media/'
